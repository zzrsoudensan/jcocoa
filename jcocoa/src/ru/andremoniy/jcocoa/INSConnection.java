package ru.andremoniy.jcocoa;

import ru.andremoniy.jcocoa.*;
import ns.NSDictionary;
import static ns.NSDictionary.*;
import ns.INSDictionary;
import static ns.INSDictionary.*;
import ns.NSDistantObject;
import static ns.NSDistantObject.*;
import ns.INSDistantObject;
import static ns.INSDistantObject.*;
import ns.NSArray;
import static ns.NSArray.*;
import ns.INSArray;
import static ns.INSArray.*;
import ns.NSPortNameServer;
import static ns.NSPortNameServer.*;
import ns.INSPortNameServer;
import static ns.INSPortNameServer.*;
import ns.NSPort;
import static ns.NSPort.*;
import ns.INSPort;
import static ns.INSPort.*;
import ns.NSRunLoop;
import static ns.NSRunLoop.*;
import ns.INSRunLoop;
import static ns.INSRunLoop.*;
import ns.NSInvocation;
import static ns.NSInvocation.*;
import ns.INSInvocation;
import static ns.INSInvocation.*;
import ns.NSConnection;
import static ns.NSConnection.*;
import ns.INSConnection;
import static ns.INSConnection.*;
import ns.NSException;
import static ns.NSException.*;
import ns.INSException;
import static ns.INSException.*;

import ns.NSObject;

public abstract class INSConnection extends NSObject {

	protected NSObject receivePort;
	protected NSObject sendPort;
	protected NSObject delegate;
	protected int32_t busy;
	protected int32_t localProxyCount;
	protected int32_t waitCount;
	protected NSObject delayedRL;
	protected NSObject statistics;
	protected char isDead;
	protected char isValid;
	protected char wantsInvalid;
	protected char authGen;
	protected char authCheck;
	protected char encryptFlag;
	protected char decryptFlag;
	protected char doRequest;
	protected char isQueueing;
	protected char isMulti;
	protected char invalidateRP;
	protected NSObject ___1;
	protected NSObject ___2;
	protected NSObject runLoops;
	protected NSObject requestModes;
	protected NSObject rootObject;
	protected void registerInfo;
	protected NSObject replMode;
	protected NSObject classInfoImported;
	protected NSObject releasedProxies;
	protected void reserved;

	public NSDictionary statistics() { return null;
};
	public void setRequestTimeout(NSTimeInterval ti) { return ;
};
	public NSTimeInterval requestTimeout() { return null;
};
	public void setReplyTimeout(NSTimeInterval ti) { return ;
};
	public NSTimeInterval replyTimeout() { return null;
};
	public void setRootObject(NSObject anObject) { return ;
};
	public NSObject rootObject() { return null;
};
	public NSDistantObject rootProxy() { return null;
};
	public void setDelegate(NSObject anObject) { return ;
};
	public NSObject delegate() { return null;
};
	public void setIndependentConversationQueueing(Boolean yorn) { return ;
};
	public Boolean independentConversationQueueing() { return null;
};
	public Boolean isValid() { return null;
};
	public void invalidate() { return ;
};
	public void addRequestMode(String rmode) { return ;
};
	public void removeRequestMode(String rmode) { return ;
};
	public NSArray requestModes() { return null;
};
	public Boolean registerName(String name) { return null;
};
	public Boolean registerName(String name, NSPortNameServer server) { return null;
};
	public NSObject initWithReceivePort(NSPort receivePort, NSPort sendPort) { return null;
};
	public NSPort sendPort() { return null;
};
	public NSPort receivePort() { return null;
};
	public void enableMultipleThreads() { return ;
};
	public Boolean multipleThreadsEnabled() { return null;
};
	public void addRunLoop(NSRunLoop runloop) { return ;
};
	public void removeRunLoop(NSRunLoop runloop) { return ;
};
	public void runInNewThread() { return ;
};
	public NSArray remoteObjects() { return null;
};
	public NSArray localObjects() { return null;
};
	public NSInvocation invocation() { return null;
};
	public NSConnection connection() { return null;
};
	public NSObject conversation() { return null;
};
	public void replyWithException(NSException exception) { return ;
};
}
