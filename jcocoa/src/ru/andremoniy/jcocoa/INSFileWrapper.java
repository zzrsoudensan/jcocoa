package ru.andremoniy.jcocoa;

import ru.andremoniy.jcocoa.*;
import ns.NSDictionary;
import static ns.NSDictionary.*;
import ns.INSDictionary;
import static ns.INSDictionary.*;
import ns.NSImage;
import static ns.NSImage.*;
import ns.INSImage;
import static ns.INSImage.*;
import ns.NSURL;
import static ns.NSURL.*;
import ns.INSURL;
import static ns.INSURL.*;
import ns.NSError;
import static ns.NSError.*;
import ns.INSError;
import static ns.INSError.*;
import ns.NSData;
import static ns.NSData.*;
import ns.INSData;
import static ns.INSData.*;
import ns.NSFileWrapper;
import static ns.NSFileWrapper.*;
import ns.INSFileWrapper;
import static ns.INSFileWrapper.*;

import ns.NSObject;

public abstract class INSFileWrapper extends NSObject {

	public static class NSFileWrapperReadingOptions extends NSUInteger { }
	public static class NSFileWrapperWritingOptions extends NSUInteger { }
	protected NSDictionary _fileAttributes;
	protected String _preferredFileName;
	protected String _fileName;
	protected NSObject _contents;
	protected NSImage _icon;
	protected NSObject _moreVars;

	public NSObject initWithURL(NSURL url, NSFileWrapperReadingOptions options, NSError outError) { return null;
};
	public NSObject initDirectoryWithFileWrappers(NSDictionary childrenByPreferredName) { return null;
};
	public NSObject initRegularFileWithContents(NSData contents) { return null;
};
	public NSObject initSymbolicLinkWithDestinationURL(NSURL url) { return null;
};
	public NSObject initWithSerializedRepresentation(NSData serializeRepresentation) { return null;
};
	public Boolean isDirectory() { return null;
};
	public Boolean isRegularFile() { return null;
};
	public Boolean isSymbolicLink() { return null;
};
	public void setPreferredFilename(String fileName) { return ;
};
	public String preferredFilename() { return null;
};
	public void setFilename(String fileName) { return ;
};
	public String filename() { return null;
};
	public void setFileAttributes(NSDictionary fileAttributes) { return ;
};
	public NSDictionary fileAttributes() { return null;
};
	public void setIcon(NSImage icon) { return ;
};
	public NSImage icon() { return null;
};
	public Boolean matchesContentsOfURL(NSURL url) { return null;
};
	public Boolean readFromURL(NSURL url, NSFileWrapperReadingOptions options, NSError outError) { return null;
};
	public Boolean writeToURL(NSURL url, NSFileWrapperWritingOptions options, NSURL originalContentsURL, NSError outError) { return null;
};
	public NSData serializedRepresentation() { return null;
};
	public String addFileWrapper(NSFileWrapper child) { return null;
};
	public String addRegularFileWithContents(NSData data, String fileName) { return null;
};
	public void removeFileWrapper(NSFileWrapper child) { return ;
};
	public NSDictionary fileWrappers() { return null;
};
	public String keyForFileWrapper(NSFileWrapper child) { return null;
};
	public NSData regularFileContents() { return null;
};
	public NSURL symbolicLinkDestinationURL() { return null;
};
	public NSObject initWithPath(String path) { return null;
};
	public NSObject initSymbolicLinkWithDestination(String path) { return null;
};
	public Boolean needsToBeUpdatedFromPath(String path) { return null;
};
	public Boolean updateFromPath(String path) { return null;
};
	public Boolean writeToFile(String path, Boolean atomicFlag, Boolean updateFilenamesFlag) { return null;
};
	public String addFileWithPath(String path) { return null;
};
	public String addSymbolicLinkWithDestination(String path, String filename) { return null;
};
	public String symbolicLinkDestination() { return null;
};
}
