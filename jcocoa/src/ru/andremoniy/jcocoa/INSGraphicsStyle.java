package ru.andremoniy.jcocoa;

import ru.andremoniy.jcocoa.*;
import ns.NSView;
import static ns.NSView.*;
import ns.INSView;
import static ns.INSView.*;
import ns.NSAttributedString;
import static ns.NSAttributedString.*;
import ns.INSAttributedString;
import static ns.INSAttributedString.*;
import ns.NSImage;
import static ns.NSImage.*;
import ns.INSImage;
import static ns.INSImage.*;
import ns.NSColor;
import static ns.NSColor.*;
import ns.INSColor;
import static ns.INSColor.*;
import ns.NSGraphicsStyle;
import static ns.NSGraphicsStyle.*;
import ns.INSGraphicsStyle;
import static ns.INSGraphicsStyle.*;

import ns.NSObject;

public abstract class INSGraphicsStyle extends NSObject {

	public static class  {
		double left;
		double right;
		double top;
		double bottom;
	}

	protected NSView _view;

	public NSSize menuItemSeparatorSize() { return null;
};
	public NSSize menuItemBranchArrowSize() { return null;
};
	public NSSize menuItemCheckMarkSize() { return null;
};
	public NSSize menuItemGutterSize() { return null;
};
	public NSSize menuItemTextSize(String title) { return null;
};
	public double menuBarHeight() { return null;
};
	public double menuItemGutterGap() { return null;
};
	public Margins menuItemBranchArrowMargins() { return null;
};
	public Margins menuItemGutterMargins() { return null;
};
	public Margins menuItemTextMargins() { return null;
};
	public void drawMenuSeparatorInRect(NSRect rect) { return ;
};
	public void drawMenuGutterInRect(NSRect rect) { return ;
};
	public void drawMenuCheckmarkInRect(NSRect rect, Boolean enabled, Boolean selected) { return ;
};
	public void drawMenuItemText(String string, NSRect rect, Boolean enabled, Boolean selected) { return ;
};
	public void drawAttributedMenuItemText(NSAttributedString string, NSRect rect, Boolean enabled, Boolean selected) { return ;
};
	public void drawMenuBranchArrowInRect(NSRect rect, Boolean enabled, Boolean selected) { return ;
};
	public void drawMenuWindowBackgroundInRect(NSRect rect) { return ;
};
	public void drawMenuBarBackgroundInRect(NSRect rect) { return ;
};
	public void drawMenuSelectionInRect(NSRect rect, Boolean enabled) { return ;
};
	public void drawMenuBarItemBorderInRect(NSRect rect, Boolean hovering, Boolean selected) { return ;
};
	public void drawUnborderedButtonInRect(NSRect rect, Boolean defaulted) { return ;
};
	public void drawPushButtonNormalInRect(NSRect rect, Boolean defaulted) { return ;
};
	public void drawPushButtonPressedInRect(NSRect rect) { return ;
};
	public void drawPushButtonHighlightedInRect(NSRect rect) { return ;
};
	public NSSize sizeOfButtonImage(NSImage image, Boolean enabled, Boolean mixed) { return null;
};
	public void drawButtonImage(NSImage image, NSRect rect, Boolean enabled, Boolean mixed) { return ;
};
	public void drawBrowserTitleBackgroundInRect(NSRect rect) { return ;
};
	public void drawBrowserHorizontalScrollerWellInRect(NSRect rect, NSRect clipRect) { return ;
};
	public NSRect drawColorWellBorderInRect(NSRect rect, Boolean enabled, Boolean bordered, Boolean active) { return null;
};
	public void drawPopUpButtonWindowBackgroundInRect(NSRect rect) { return ;
};
	public void drawOutlineViewGridInRect(NSRect rect) { return ;
};
	public NSRect drawProgressIndicatorBackground(NSRect rect, NSRect clipRect, Boolean bezeled) { return null;
};
	public void drawProgressIndicatorChunk(NSRect rect) { return ;
};
	public void drawProgressIndicatorIndeterminate(NSRect rect, NSRect clipRect, Boolean bezeled, double animation) { return ;
};
	public void drawProgressIndicatorDeterminate(NSRect rect, NSRect clipRect, Boolean bezeled, double value) { return ;
};
	public void drawScrollerButtonInRect(NSRect rect, Boolean enabled, Boolean pressed, Boolean vertical, Boolean upOrLeft) { return ;
};
	public void drawScrollerKnobInRect(NSRect rect, Boolean vertical, Boolean highlight) { return ;
};
	public void drawScrollerTrackInRect(NSRect rect, Boolean vertical, Boolean upOrLeft) { return ;
};
	public void drawScrollerTrackInRect(NSRect rect, Boolean vertical) { return ;
};
	public NSSize sliderKnobSizeForControlSize(NSControlSize controlSize) { return null;
};
	public void drawSliderKnobInRect(NSRect rect, Boolean vertical, Boolean highlighted, Boolean hasTickMarks, NSTickMarkPosition tickMarkPosition) { return ;
};
	public void drawSliderTrackInRect(NSRect rect, Boolean vertical, Boolean hasTickMarks) { return ;
};
	public void drawSliderTickInRect(NSRect rect) { return ;
};
	public void drawStepperButtonInRect(NSRect rect, NSRect clipRect, Boolean enabled, Boolean highlighted, Boolean upNotDown) { return ;
};
	public void drawTableViewHeaderInRect(NSRect rect, Boolean highlighted) { return ;
};
	public void drawTableViewCornerInRect(NSRect rect) { return ;
};
	public void drawBoxWithLineInRect(NSRect rect) { return ;
};
	public void drawBoxWithBezelInRect(NSRect rect, NSRect clipRect) { return ;
};
	public void drawBoxWithGrooveInRect(NSRect rect, NSRect clipRect) { return ;
};
	public void drawComboBoxButtonInRect(NSRect rect, Boolean enabled, Boolean bordered, Boolean pressed) { return ;
};
	public void drawTabInRect(NSRect rect, NSRect clipRect, NSColor color, Boolean selected) { return ;
};
	public void drawTabPaneInRect(NSRect rect) { return ;
};
	public void drawTabViewBackgroundInRect(NSRect rect) { return ;
};
	public void drawTextFieldBorderInRect(NSRect rect, Boolean bezeledNotLine) { return ;
};
	public void drawTextViewInsertionPointInRect(NSRect rect, NSColor color) { return ;
};
	public NSGraphicsStyle graphicsStyle() { return null;
};
}
