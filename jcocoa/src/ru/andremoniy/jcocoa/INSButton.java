package ru.andremoniy.jcocoa;

import ru.andremoniy.jcocoa.*;


public abstract class INSButton extends NSControl {
	public String title() { return null;
};
	public void setTitle(String aString) { return ;
};
	public String alternateTitle() { return null;
};
	public void setAlternateTitle(String aString) { return ;
};
	public NSImage image() { return null;
};
	public void setImage(NSImage image) { return ;
};
	public NSImage alternateImage() { return null;
};
	public void setAlternateImage(NSImage image) { return ;
};
	public NSCellImagePosition imagePosition() { return null;
};
	public void setImagePosition(NSCellImagePosition aPosition) { return ;
};
	public void setButtonType(NSButtonType aType) { return ;
};
	public Integer state() { return null;
};
	public void setState(Integer value) { return ;
};
	public Boolean isBordered() { return null;
};
	public void setBordered(Boolean flag) { return ;
};
	public Boolean isTransparent() { return null;
};
	public void setTransparent(Boolean flag) { return ;
};
	public void setPeriodicDelay(double delay, double interval) { return ;
};
	public void getPeriodicDelay(double delay, double interval) { return ;
};
	public String keyEquivalent() { return null;
};
	public void setKeyEquivalent(String charCode) { return ;
};
	public Integer keyEquivalentModifierMask() { return null;
};
	public void setKeyEquivalentModifierMask(Integer mask) { return ;
};
	public void highlight(Boolean flag) { return ;
};
	public Boolean performKeyEquivalent(NSEvent key) { return null;
};
	public void setTitleWithMnemonic(String stringWithAmpersand) { return ;
};
	public NSAttributedString attributedTitle() { return null;
};
	public void setAttributedTitle(NSAttributedString aString) { return ;
};
	public NSAttributedString attributedAlternateTitle() { return null;
};
	public void setAttributedAlternateTitle(NSAttributedString obj) { return ;
};
	public void setBezelStyle(NSBezelStyle bezelStyle) { return ;
};
	public NSBezelStyle bezelStyle() { return null;
};
	public void setAllowsMixedState(Boolean flag) { return ;
};
	public Boolean allowsMixedState() { return null;
};
	public void setNextState() { return ;
};
	public void setShowsBorderOnlyWhileMouseInside(Boolean show) { return ;
};
	public Boolean showsBorderOnlyWhileMouseInside() { return null;
};
	public void setSound(NSSound aSound) { return ;
};
	public NSSound sound() { return null;
};
}
