package ru.andremoniy.jcocoa;

import ru.andremoniy.jcocoa.*;
import ns.NSInputSource;
import static ns.NSInputSource.*;
import ns.INSInputSource;
import static ns.INSInputSource.*;
import ns.NSArray;
import static ns.NSArray.*;
import ns.INSArray;
import static ns.INSArray.*;
import ns.NSDictionary;
import static ns.NSDictionary.*;
import ns.INSDictionary;
import static ns.INSDictionary.*;
import ns.NSError;
import static ns.NSError.*;
import ns.INSError;
import static ns.INSError.*;

import ns.NSObject;

public abstract class INSPlatform extends NSObject {
	public NSInputSource parentDeathInputSource() { return null;
};
	public Class taskClass() { return null;
};
	public Class socketClass() { return null;
};
	public Class pipeClass() { return null;
};
	public Class lockClass() { return null;
};
	public Class recursiveLockClass() { return null;
};
	public Class conditionLockClass() { return null;
};
	public Class persistantDomainClass() { return null;
};
	public Class timeZoneClass() { return null;
};
	public Class conditionClass() { return null;
};
	public String userName() { return null;
};
	public String fullUserName() { return null;
};
	public String homeDirectory() { return null;
};
	public String libraryDirectory() { return null;
};
	public String temporaryDirectory() { return null;
};
	public NSArray arguments() { return null;
};
	public NSDictionary environment() { return null;
};
	public String hostName() { return null;
};
	public String DNSHostName() { return null;
};
	public NSArray addressesForDNSHostName(String name) { return null;
};
	public String hostNameByAddress(String address) { return null;
};
	public void mapContentsOfFile(String path, Integer length) { return ;
};
	public void unmapAddress(void ptr, Integer length) { return ;
};
	public Boolean writeContentsOfFile(String path, void bytes, Integer length, Integer options, NSError errorp) { return null;
};
	public void checkEnvironmentKey(String key, String value) { return ;
};
}
